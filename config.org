#+TITLE: Emacs Configuration
#+AUTHOR: Anderson Saunders
#+EMAIL: andsbf at gmail.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes the
initial setup for =package.el= and ensures that =use-package= is installed, since I
wanna do that right away.

This makes =use-package= verbose, so we can see what is going on.

#+begin_src emacs-lisp
  (setq use-package-verbose t)
#+end_src

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

Disable TLS 1.3; ELPA has higher standards. That'll be the default in Emacs
26.3, I think, but I'm not there yet.

#+begin_src emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src

Disable deprecation warnings about =cl=. The =cl= library has been deprecated, but
lots of packages still use it. I can't control that, but I can disable the
warnings.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

Set up =auto-package-update= to let me update packages from the command line (say,
in a =cron= job), with:

=$ emacs --no-window-system --funcall=auto-package-update-now --kill=

#+begin_src emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t))
#+end_src

* Use =sensible-defaults.el=

Use [[./sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+begin_src emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
  (setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/var/tmp/\\1" t)))
#+end_src

* Set personal information

** Who am I? Where am I?

#+begin_src emacs-lisp
  (setq user-full-name "Anderson Saunders"
        user-mail-address "andsbf@gmail.com"
        calendar-latitude -28.095234496717318
        calendar-longitude 153.4241684081013
        calendar-location-name "Gold Coast,QLD, Australia"
        calendar-date-style "european"
        )
#+end_src

* Large files warning

#+begin_src emacs-lisp
  (setq large-file-warning-threshold 100000000)
#+end_src

* Garbage Collection Threshold

Reduce the frequency of garbage collection by making it happen on
each 50MB of allocated data (the default is on every 0.76MB)

#+begin_src emacs-lisp
  (setq gc-cons-threshold 50000000)
#+end_src

* PlantUML
  I have started using emacs org. Lets see where does it take me.

#+begin_src emacs-lisp
(use-package plantuml-mode
    :ensure t)

(setq plantuml-jar-path "~/.emacs.d/plantuml-1.2022.2.jar")
(setq plantuml-default-exec-mode 'jar)
(setq org-plantuml-jar-path (expand-file-name "/Users/ando/.emacs.d/plantuml-1.2022.2.jar"))
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

#+end_src

* Make the cursor Blink
  Helps to identify where the cursor is.

#+begin_src emacs-lisp
 (blink-cursor-mode t)
#+end_src

* Regex
  reference: https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder
#+begin_src emacs-lisp
(setq reb-re-syntax 'string)
;; A Powerfull alternative, but I don't need so far.
;; (setq reb-re-syntax 'rx)
#+end_src

* Org

  I have started using emacs org. Lets see where does it take me.

  #+begin_src emacs-lisp
(use-package org-journal
  :ensure t)

(global-set-key (kbd "C-c c") #'org-capture)
(setq org-capture-templates
      '(("p" "Personal Notes" entry
         (file+headline "~/Documents/notes/p_notes" "Notes")
         "\n* %? - %U" :prepend t :empty-lines-after 1)
        ("w" "Work  Notes" entry
         (file+headline "~/Documents/notes/w_notes" "Notes")
         "\n* %? - %U" :prepend t :empty-lines-after 1)))

(setq org-src-preserve-indentation t)
  #+end_src

* UI preferences
** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+end_src

There's a tiny scroll bar that appears in the minibuffer window. This disables
that:

#+begin_src emacs-lisp
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src

** Scrolling

A better experience when scrolling

#+begin_src emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100
        scroll-preserve-screen-position 1)
#+end_src

** Mode-line tweaks

A better experience when scrolling

#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+end_src

** Frame title

Either a file name or a buffer name

#+begin_src emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+end_src

** Spaces over Tabs

Never use tabs. Tabs are the devilâ€™s whitespace.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Indentation

To be moved to each mode, but here for now.

#+begin_src emacs-lisp
(setq-default tab-width 2)            ;; but maintain correct appearance
(setq js-indent-level 2)
(setq typescript-indent-level 2)
(setq typescript-expr-indent-offset 2)
(setq css-indent-offset 2)
#+end_src

** Whitespace

Make it visible and delete it on save, except to shell/term

#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)


  (defun my-hide-trailing-whitespace-maybe ()
    "Disable `show-trailing-whitespace' in selected modes."
    (when (derived-mode-p 'shell-mode
                          'term-mode)
      (setq show-trailing-whitespace nil)))

  (add-hook 'after-change-major-mode-hook
            'my-hide-trailing-whitespace-maybe)
#+end_src

** Selection

If some text is selected, and you type some text, delete the selected
text and start inserting your typed text.

#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

** Buffers

Auto revert if there an external change

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Enable Narrowing

Sometimes it helps narrow down the view to focus on the problem.

#+begin_src emacs-lisp
  (put 'narrow-to-defun  'disabled nil)
  (put 'narrow-to-page   'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src

** Enable Subword-mode

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+begin_src emacs-lisp
  (use-package subword
    :config (global-subword-mode 1))
#+end_src

** Enable Ibuffer

Replace buffer-menu with ibuffer

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
#+end_src

** UTF-8

Set UTF-8 as preferred enconding system

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src

** Tab key Behaviour

Smart tab behavior - indent or complete

#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+begin_src emacs-lisp
  (use-package hl-line
    :config
    (global-hl-line-mode +1))
#+end_src

** Load Solarized-theme

#+begin_src emacs-lisp
(use-package solarized-theme
  :config
  (load-theme 'solarized-light t)

  (setq solarized-use-variable-pitch nil
        solarized-height-plus-1 1.0
        solarized-height-plus-2 1.0
        solarized-height-plus-3 1.0
        solarized-height-plus-4 1.0)

  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))
#+end_src

** Uniquify

In case two buffers have the same name, prefix it with the path up to
a point where it is no longer uniq.

#+begin_src emacs-lisp
  (setq uniquify-buffer-name-style 'forward)
#+end_src

** Highlight yanked

Temporarily highlight changes from yanking

#+begin_src emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :config
    (volatile-highlights-mode +1))
#+end_src

** My Saving Folder

Folder where I save/shove my stuff

#+begin_src emacs-lisp
  (defconst ando-savefiles-dir (expand-file-name "savefiles" user-emacs-directory))

  ;; create the savefile dir if it doesn't exist
  (unless (file-exists-p ando-savefiles-dir)
    (make-directory ando-savefiles-dir))
#+end_src

** Keep track of recent files

Remember files recently opened

#+begin_src emacs-lisp
  (use-package recentf
    :config
    (setq recentf-save-file (expand-file-name "recentf" ando-savefiles-dir)
          recentf-max-saved-items 500
          recentf-max-menu-items 15
          ;; disable recentf-cleanup on Emacs start, because it can cause
          ;; problems with remote files
          recentf-auto-cleanup 'never)
    (recentf-mode +1))
#+end_src

** Keep history of Search/mini-buffer

Makes it easier to redo searchs

#+begin_src emacs-lisp
  (use-package savehist
    :config
    (setq savehist-additional-variables
          ;; search entries
          '(search-ring regexp-search-ring)
          ;; save every minute
          savehist-autosave-interval 60
          ;; keep the home clean
          savehist-file (expand-file-name "savehist" ando-savefiles-dir))
    (savehist-mode +1))
#+end_src

** Line Numbers

#+begin_src emacs-lisp
  (global-linum-mode t)
  (setq linum-format "%d ")
#+end_src

** Magit

Magit is the greatness

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :config
    (setq magit-save-repository-buffers nil))
#+end_src

** Misc. to be looked at
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (global-set-key (kbd "C-x f") #'projectile-find-file-dwim-other-window)
    (setq projectile-enable-caching t)
    )

  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-ignore-order)))
    (setq enable-recursive-minibuffers t)
    (global-set-key (kbd "C-c C-r") 'ivy-resume))

  (use-package counsel
    :ensure t )

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode +1)
    :ensure t )

  (use-package swiper
    :ensure t)
  (ivy-mode)
  (counsel-mode)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

  (use-package expand-region
    :ensure t
    :bind (("C-c e" . er/expand-region)))

  (use-package web-mode
    :ensure t
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-indent-style 2)

    (setq web-mode-tag-auto-close-style t)
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-auto-opening t)
    (setq web-mode-enable-auto-quoting nil)

    (setq web-mode-content-types-alist
          '(("jsx" . "\\.js[x]?\\'")))

    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode)))

  (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil))

  (use-package yasnippet
    :ensure t
    :bind (:map yas-minor-mode-map
                ("TAB" . nil)
                ("<tab>" . nil))
    :config
    (yas-global-mode))


  (use-package enh-ruby-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.rb\\'" . enh-ruby-mode))
    (setq enh-ruby-deep-indent-paren nil)
    (setq enh-ruby-deep-indent-construct nil))




  ;; config changes made through the customize UI will be stored here
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (when (file-exists-p custom-file)
    (load custom-file))

  ;; My Functions

  ;;My  Macros
  ;; set upcase-region function on
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (defun sort-words (reverse beg end)
    "Sort words in region alphabetically, in REVERSE if negative.
            Prefixed with negative \\[universal-argument], sorts in reverse.

            The variable `sort-fold-case' determines whether alphabetic case
            affects the sort order.

            See `sort-regexp-fields'."
    (interactive "*P\nr")
    (sort-regexp-fields reverse "\\w+" "\\&" beg end))

  ;; toggle maximize buffer
  (defun toggle-maximize-buffer () "Maximize buffer"
         (interactive)
         (if (= 1 (length (window-list)))
             (jump-to-register '_)
           (progn
             (window-configuration-to-register '_)
             (delete-other-windows))))

  ;; Bind it to a key.
  (global-set-key (kbd "C-c m b") 'toggle-maximize-buffer)
  (put 'erase-buffer 'disabled nil)

  ;; remove hash files from projectile search
  (add-to-list 'projectile-globally-ignored-files ".#*")

  ;; dired defaults
  (setq dired-listing-switches "-aBhl")

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  ;; (add-hook 'before-save-hook 'tide-format-before-save)

  ;; (add-hook 'typescript-mode-hook #'setup-tide-mode)


  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
  ;; (add-hook 'web-mode-hook
  ;;           (lambda ()
  ;;             (when (string-equal "tsx" (file-name-extension buffer-file-name))
  ;;               (setup-tide-mode))))
  ;; ;; enable typescript-tslint checker
  ;; (flycheck-add-mode 'typescript-tslint 'web-mode)
  (put 'set-goal-column 'disabled nil)


  ;; <Color theme initialization code>

  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))

  (defun synchronize-theme ()
    (setq hour
          (string-to-number
           (substring (current-time-string) 11 13)))
    (if (member hour (number-sequence 6 17))
        (load-theme 'solarized-light t)
      (load-theme 'solarized-dark t) ) )

  (run-with-timer 0 3600 'synchronize-theme)

  ;; LSP
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (rust-mode . lsp)
           (enh-ruby-mode . lsp)
           (typescript-mode . lsp)
           (web-mode . lsp))

    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;; which-key integration
  (use-package which-key
    :config
    (which-key-mode))


  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx)

  ;; Pressing C-SPC after the first invocation of C-u C-SPC to jump to previous locations stored in the mark ring.
  (setq set-mark-command-repeat-pop t)

  ;; Auto load MacOS Path
  (use-package exec-path-from-shell
    :ensure t)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

  ;; Avy text search
  (use-package avy
    :ensure t
    :bind*
    ("C-;" . avy-goto-char-2))

  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode t))

  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-scope 'frame))

  (use-package solarized-theme
    :config
    (load-theme 'solarized-light t)

    (setq solarized-use-variable-pitch nil
          solarized-height-plus-1 1.0
          solarized-height-plus-2 1.0
          solarized-height-plus-3 1.0
          solarized-height-plus-4 1.0)

    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))

  ;; Configure a pretty modeline

  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))

  (use-package minions
    :config
    (setq minions-mode-line-lighter "âš™"
          minions-mode-line-delimiters (cons "" ""))
    (minions-mode 1))

  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (message "Happy days")

#+end_src

* Limbo

Things that I'm not sure if I still need it or I have not tried yet.

** Abbreviations tweak

Hippie expand is dabbrev expand on steroids
first I define a function for substring matching, so it can match

#+begin_src emacs-lisp :eval never
(defun try-my-dabbrev-substring (old)
  (let ((old-fun (symbol-function 'he-dabbrev-search)))
    (fset 'he-dabbrev-search (symbol-function 'my-dabbrev-substring-search))
    (unwind-protect
        (try-expand-dabbrev old)
      (fset 'he-dabbrev-search old-fun))))


(defun my-dabbrev-substring-search (pattern &optional reverse limit)
  (let ((result ())
	(regpat (cond ((not hippie-expand-dabbrev-as-symbol)
		       (concat (regexp-quote pattern) "\\sw+"))
		      ((eq (char-syntax (aref pattern 0)) ?_)
		       (concat (regexp-quote pattern) "\\(\\sw\\|\\s_\\)+"))
		      (t
		       (concat (regexp-quote pattern)
			       "\\(\\sw\\|\\s_\\)+")))))
    (while (and (not result)
		(if reverse
		     (re-search-backward regpat limit t)
		     (re-search-forward regpat limit t)))
      (setq result (buffer-substring-no-properties (save-excursion
                                           (goto-char (match-beginning 0))
                                                     (skip-syntax-backward "w_")
                                                     (point))
						   (match-end 0)))
      (if (he-string-member result he-tried-table t)
	  (setq result nil)))     ; ignore if bad prefix or already in table
    result))

;; define flexiable macth expansion
;; https://www.emacswiki.org/emacs/HippieExpand#toc8

(defun try-expand-flexible-abbrev (old)
  "Try to complete word using flexible matching.

Flexible matching works by taking the search string and then
interspersing it with a regexp for any character. So, if you try
to do a flexible match for `foo' it will match the word
`findOtherOtter' but also `fixTheBoringOrange' and
`ifthisisboringstopreadingnow'.

The argument OLD has to be nil the first call of this function, and t
for subsequent calls (for further possible completions of the same
string).  It returns t if a new completion is found, nil otherwise."
  (if (not old)
      (progn
	      (he-init-string (he-lisp-symbol-beg) (point))
	      (if (not (he-string-member he-search-string he-tried-table))
	          (setq he-tried-table (cons he-search-string he-tried-table)))
	      (setq he-expand-list
	            (and (not (equal he-search-string ""))
		               (he-flexible-abbrev-collect he-search-string)))))
  (while (and he-expand-list
	            (he-string-member (car he-expand-list) he-tried-table))
    (setq he-expand-list (cdr he-expand-list)))
  (if (null he-expand-list)
      (progn
	      (if old (he-reset-string))
	      ())
    (progn
	    (he-substitute-string (car he-expand-list))
	    (setq he-expand-list (cdr he-expand-list))
	    t)))

(defun he-flexible-abbrev-collect (str)
  "Find and collect all words that flex-matches STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (let ((collection nil)
        (regexp (he-flexible-abbrev-create-regexp str)))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward-regexp regexp nil t)
        ;; Is there a better or quicker way than using
        ;; `thing-at-point' here?
        (setq collection (cons (thing-at-point 'word) collection))))
    collection))

(defun he-flexible-abbrev-create-regexp (str)
  "Generate regexp for flexible matching of STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (concat "\\b" (mapconcat (lambda (x) (concat "\\w*" (list x))) str "")
          "\\w*" "\\b"))

(setq hippie-expand-try-functions-list '(try-my-dabbrev-substring
                                         try-expand-flexible-abbrev
                                         try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

;; use hippie-expand instead of dabbrev
(global-set-key (kbd "M-/") #'hippie-expand)
(global-set-key (kbd "s-/") #'hippie-expand)
#+end_src
